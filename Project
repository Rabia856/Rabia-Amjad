################################################################
#CAO Project
#Implementation of Tower of Hanoi using MIPS
#Tower of Hanoi consist of three towers and n number of disk
#Rules of game
#Rule-1: One disc can be moved at one time
#Rule-2: Smaller disk cannot be placed below larger disk
#Number of moves can be obtained by formula 2*moves(a-1)+1
################################################################

#.data section
#Initialization/Declaration of variables

#Done by Rabia
.data
d:.asciiz "\n======================================"
TOH:.asciiz "\n|           TOWER OF HANOI           |"
d1:.asciiz "\n======================================"
prompt:.asciiz "\n\nEnter number of disk:"
Part1:.asciiz "\nMove Disk from tower "
Part2:.asciiz" to "
Part3:.asciiz "tower "
newline:.asciiz "\n"
bye:.asciiz "\nHave a good day!"

#.text section
#Coding of main program

.text 
.globl main

main:

#Print string message
li $v0,4
la $a0,d
syscall

#Print string message
li $v0,4
la $a0,TOH
syscall

#Print string message
li $v0,4
la $a0,d1
syscall

#Print string message
li $v0,4
la $a0,prompt
syscall

#Read integer value
li $v0,5
syscall

#Branch to label bye if $v0 <= zero
ble $v0,0,Bye

#move the value of $v0 to $s0
move $s0,$v0

li $s1,1    #Load immidiate $s1 with 1(i.e for Tower 1)
li $s2,2    #Load immidiate $s1 with 2(i.e for Tower 2)
li $s3,3    #Load immidiate $s1 with 3(i.e for Tower 3)

#Jump and link label Tower of Hanoi
jal Tower_of_Hanoi

#Unconditional branch to label exit
b exit

#Tower of Hanoi label
Tower_of_Hanoi:

#branch to label loop if value of #s0 is not equals to 1
bne $s0,1,loop

#print string message
li $v0,4
la $a0,Part1
syscall

#print int value
li $v0,1
add $a0,$s1,$zero
syscall

#print string message
li $v0,4
la $a0,Part2
syscall

#print string message
li $v0,4
la $a0,Part3
syscall

#print int value
li $v0,1
add $a0,$s3,$zero
syscall

#print string message
li $v0,4
la $a0,newline
syscall

#jumpt to register ra
jr $ra

#Done by Rida
#loop label
loop:

#Initial value of stack
addiu $sp,$sp,-20

#Storing in stack
sw $ra, 16($sp)     #Store return register
sw $s3, 12($sp)     #Store tower 3    
sw $s2, 8($sp)      #Store tower 2
sw $s1, 4($sp)      #Store tower 1
sw $s0, 0($sp)      #Store number of disks

#Recursive call 1
#Swapping of tower 2 and 3
move $t0,$s2
move $s2,$s3
move $s3,$t0

addiu $s0,$s0,-1

jal Tower_of_Hanoi

lw $ra,16($sp)     #Load return address
lw $s3,12($sp)     #Load tower 3
lw $s2,8($sp)      #Load tower 2
lw $s1,4($sp)      #Load tower 1
lw $s0,0($sp)      #Load number of disks

#print string message
li $v0,4
la $a0,Part1
syscall

#print int value
li $v0,1
add $a0,$s1,$zero
syscall

#print string message
li $v0,4
la $a0,Part2
syscall

#print string message
li $v0,4
la $a0,Part3
syscall

#print int value
li $v0,1
add $a0,$s3,$zero
syscall

#print string message
li $v0,4
la $a0,newline
syscall

#Done by Rabbia
#Recursive call 2
#Swapping of tower 2 and 1
move $t0,$s2
move $s2,$s1
move $s1,$t0

addiu $s0,$s0,-1

jal Tower_of_Hanoi

lw $ra,16($sp)

addiu $sp,$sp,20

jr $ra

#bye label
Bye:

#print string message
li $v0,4
la $a0,bye
syscall

#unconditional branch to exit label
b exit

#exit label
exit:
li $v0,10
syscall
